{"version":3,"sources":["pages/RepositoriesPage/actions/index.js","pages/RepositoriesPage/reducers/index.js","pages/RepositoryPage/actions/index.js","pages/RepositoryPage/reducers/index.js","store/rootReducer.js","constants/actionPostfixes.js","config/apiConfig.js","constants/pageConstants.js","pages/RepositoriesPage/api/index.js","pages/RepositoryPage/api/index.js","api/apiCallsMapping.js","helpers/request/actionPostfixCreator.js","helpers/request/watchRequest.js","store/rootSaga.js","store/configureStore.js","routes/routeNames.js","pages/HomePage/components/styles.js","pages/HomePage/components/HomePage.js","pages/RepositoriesPage/components/RepositoryCard/RepositoryCard.js","pages/RepositoriesPage/components/RepositoriesOverview.js","pages/RepositoriesPage/containers/RepositoriesContainer.js","pages/RepositoryPage/components/RepositoryPage/RepositoryPage.js","pages/RepositoryPage/containers/RepositoryPageContainer.js","routes/Routes.js","index.js"],"names":["GET_GITHUB_REPOSITORIES_REQUEST","createAction","GET_GITHUB_REPOSITORIES_SUCCESS","GET_GITHUB_REPOSITORIES_FAIL","GET_SEARCHED_REPOSITORIES_REQUEST","GET_SEARCHED_REPOSITORIES_SUCCESS","GET_SEARCHED_REPOSITORIES_FAIL","UPDATE_INPUT_VALUE","UPDATE_CURRENT_PAGE_ID","repositoriesPage","handleActions","actions","state","isLoading","payload","repositories","response","errors","items","searchInputValue","currentPageId","GET_REPOSITORY_INFO_REQUEST","GET_REPOSITORY_INFO_SUCCESS","GET_REPOSITORY_INFO_FAIL","GET_REPOSITORY_ADDITIONAL_INFO_REQUEST","GET_REPOSITORY_ADDITIONAL_INFO_SUCCESS","GET_REPOSITORY_ADDITIONAL_INFO_FAIL","GET_REPOSITORY_LANGUAGES_INFO_REQUEST","GET_REPOSITORY_LANGUAGES_INFO_SUCCESS","GET_REPOSITORY_LANGUAGES_INFO_FAIL","repositoryPage","name","owner","description","repositoryName","avatar","avatar_url","userLogin","login","linkToGithub","html_url","decription","stargazers_count","created_at","starsUrl","commitsUrl","languagesUrl","persistConfig","key","storage","whiteList","transforms","rootReducer","combineReducers","persistReducer","POSTFIXES","config","baseURL","api","axios","create","PAGE","ITEMS_PER_PAGE","getAllRepositories","get","searchRepositoriesByName","getRepositoryById","repositoryId","getRepositoryAdditionalInfo","userName","getRepositoryLanguagesInfo","apiCallsMapping","action","mapping","repositoriesPageActions","repositoriesPageApi","repositoryPageActions","repositoryPageApi","hasOwnProperty","type","REQUEST_POSTFIX","createActionWithPostfix","postfix","slice","length","actionPayload","sendRequest","requestEnded","apiCallsSaga","SUCCESS_POSTFIX","FAIL_POSTFIX","callMethod","call","put","isEmpty","data","message","delay","isApiCallAction","endsWith","isApiCallEndedAction","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","ROUTES","styles","container","display","flexDirection","justifyContent","alignItems","boxContainer","textAlign","useStyles","makeStyles","root","paddingTop","fontSize","media","height","body","minHeight","withStyles","history","useHistory","classes","Container","AppBar","position","Toolbar","Typography","variant","className","title","Box","component","Button","onClick","push","color","ownerUrl","handleGoToDetails","CardActions","style","backgroundColor","CardContent","avatarNameWrap","gutterBottom","Link","target","href","size","DEFAULT_PAGE_ID","theme","flexGrow","breakpoints","up","search","borderRadius","shape","fade","palette","common","white","marginLeft","width","spacing","searchIcon","padding","pointerEvents","inputRoot","inputInput","paddingLeft","transition","transitions","pagination","handleGoToRepository","handleSearchInputChange","handlePageChange","handleClearInput","getRepositoriesSubarray","handleGoToHome","InputBase","placeholder","input","value","onChange","LinearProgress","trim","map","repository","id","notFoundWrapper","notFoundItem","typographyStyle","clearButton","Pagination","count","defaultPage","page","DEBOUNCE_DELAY","RepositoriesContainer","dispatch","useDispatch","useSelector","useCallback","useEffect","isEmptyInput","params","delayedQuery","debounce","event","useMemo","firstItemIndex","pageId","margin","large","handleGoToRepositories","Badge","badgeContent","max","CardHeader","Avatar","src","subheader","Date","toDateString","Object","keys","language","index","RepositoryPageContainer","useParams","Routes","exact","path","HomePage","from","to","React","memo","store","createStore","composeWithDevTools","applyMiddleware","run","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1401304e.chunk.js","sourcesContent":["import { createAction } from \"redux-actions\";\r\n\r\nexport const GET_GITHUB_REPOSITORIES_REQUEST = createAction(\r\n  \"GET_GITHUB_REPOSITORIES_REQUEST\"\r\n);\r\nexport const GET_GITHUB_REPOSITORIES_SUCCESS = createAction(\r\n  \"GET_GITHUB_REPOSITORIES_SUCCESS\"\r\n);\r\nexport const GET_GITHUB_REPOSITORIES_FAIL = createAction(\r\n  \"GET_GITHUB_REPOSITORIES_FAIL\"\r\n);\r\n\r\nexport const GET_SEARCHED_REPOSITORIES_REQUEST = createAction(\r\n  \"GET_SEARCHED_REPOSITORIES_REQUEST\"\r\n);\r\nexport const GET_SEARCHED_REPOSITORIES_SUCCESS = createAction(\r\n  \"GET_SEARCHED_REPOSITORIES_SUCCESS\"\r\n);\r\nexport const GET_SEARCHED_REPOSITORIES_FAIL = createAction(\r\n  \"GET_SEARCHED_REPOSITORIES_FAIL\"\r\n);\r\n\r\nexport const UPDATE_INPUT_VALUE = createAction(\"UPDATE_INPUT_VALUE\");\r\n\r\nexport const UPDATE_CURRENT_PAGE_ID = createAction(\"UPDATE_CURRENT_PAGE_ID\");\r\n","import { handleActions } from \"redux-actions\";\r\n\r\nimport * as actions from \"../actions\";\r\n\r\nconst defaultState = {\r\n  repositories: [],\r\n  isLoading: false,\r\n  errors: \"\",\r\n  searchInputValue: \"\",\r\n  currentPageId: \"\",\r\n};\r\n\r\nconst repositoriesPage = handleActions(\r\n  {\r\n    [actions.GET_GITHUB_REPOSITORIES_REQUEST]: (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n    }),\r\n    [actions.GET_GITHUB_REPOSITORIES_SUCCESS]: (state, { payload }) => ({\r\n      ...state,\r\n      isLoading: false,\r\n      repositories: payload.response,\r\n    }),\r\n    [actions.GET_GITHUB_REPOSITORIES_FAIL]: (state, { payload }) => ({\r\n      ...state,\r\n      isLoading: false,\r\n      errors: payload.response,\r\n    }),\r\n    [actions.GET_SEARCHED_REPOSITORIES_REQUEST]: (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n    }),\r\n    [actions.GET_SEARCHED_REPOSITORIES_SUCCESS]: (state, { payload }) => ({\r\n      ...state,\r\n      isLoading: false,\r\n      repositories: payload.response.items,\r\n    }),\r\n    [actions.GET_SEARCHED_REPOSITORIES_FAIL]: (state, { payload }) => ({\r\n      ...state,\r\n      isLoading: false,\r\n      errors: payload.response,\r\n    }),\r\n    [actions.UPDATE_INPUT_VALUE]: (state, { payload }) => ({\r\n      ...state,\r\n      searchInputValue: payload,\r\n    }),\r\n    [actions.UPDATE_CURRENT_PAGE_ID]: (state, { payload }) => ({\r\n      ...state,\r\n      currentPageId: payload,\r\n    }),\r\n  },\r\n  defaultState\r\n);\r\n\r\nexport default repositoriesPage;\r\n","import { createAction } from \"redux-actions\";\r\n\r\nexport const GET_REPOSITORY_INFO_REQUEST = createAction(\r\n  \"GET_REPOSITORY_INFO_REQUEST\"\r\n);\r\nexport const GET_REPOSITORY_INFO_SUCCESS = createAction(\r\n  \"GET_REPOSITORY_INFO_SUCCESS\"\r\n);\r\nexport const GET_REPOSITORY_INFO_FAIL = createAction(\r\n  \"GET_REPOSITORY_INFO_FAIL\"\r\n);\r\n\r\nexport const GET_REPOSITORY_ADDITIONAL_INFO_REQUEST = createAction(\r\n  \"GET_REPOSITORY_ADDITIONAL_INFO_REQUEST\"\r\n);\r\nexport const GET_REPOSITORY_ADDITIONAL_INFO_SUCCESS = createAction(\r\n  \"GET_REPOSITORY_ADDITIONAL_INFO_SUCCESS\"\r\n);\r\nexport const GET_REPOSITORY_ADDITIONAL_INFO_FAIL = createAction(\r\n  \"GET_REPOSITORY_ADDITIONAL_INFO_FAIL\"\r\n);\r\n\r\nexport const GET_REPOSITORY_LANGUAGES_INFO_REQUEST = createAction(\r\n  \"GET_REPOSITORY_LANGUAGES_INFO_REQUEST\"\r\n);\r\nexport const GET_REPOSITORY_LANGUAGES_INFO_SUCCESS = createAction(\r\n  \"GET_REPOSITORY_LANGUAGES_INFO_SUCCESS\"\r\n);\r\nexport const GET_REPOSITORY_LANGUAGES_INFO_FAIL = createAction(\r\n  \"GET_REPOSITORY_LANGUAGES_INFO_FAIL\"\r\n);\r\n","import { handleActions } from \"redux-actions\";\r\n\r\nimport * as actions from \"../actions\";\r\n\r\nconst defaultState = {\r\n  repositoryName: \"\",\r\n  starsUrl: \"\",\r\n  commitsUrl: \"\",\r\n  avatar: \"\",\r\n  userLogin: \"\",\r\n  linkToGithub: \"\",\r\n  languagesUrl: \"\",\r\n  decription: \"\",\r\n  isLoading: false,\r\n  errors: \"\",\r\n};\r\n\r\nconst repositoryPage = handleActions(\r\n  {\r\n    [actions.GET_REPOSITORY_INFO_REQUEST]: (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n    }),\r\n    [actions.GET_REPOSITORY_INFO_SUCCESS]: (state, { payload }) => {\r\n      const { name, owner, description } = payload.response;\r\n\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        repositoryName: name,\r\n        avatar: owner.avatar_url,\r\n        userLogin: owner.login,\r\n        linkToGithub: owner.html_url,\r\n        decription: description,\r\n      };\r\n    },\r\n    [actions.GET_REPOSITORY_INFO_FAIL]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        errors: payload.response,\r\n      };\r\n    },\r\n    [actions.GET_REPOSITORY_ADDITIONAL_INFO_REQUEST]: (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n    }),\r\n    [actions.GET_REPOSITORY_ADDITIONAL_INFO_SUCCESS]: (state, { payload }) => {\r\n      const { stargazers_count, created_at } = payload.response;\r\n\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        starsUrl: stargazers_count,\r\n        commitsUrl: created_at,\r\n      };\r\n    },\r\n    [actions.GET_REPOSITORY_ADDITIONAL_INFO_FAIL]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        errors: payload.response,\r\n      };\r\n    },\r\n    [actions.GET_REPOSITORY_LANGUAGES_INFO_REQUEST]: (state) => ({\r\n      ...state,\r\n      isLoading: true,\r\n    }),\r\n    [actions.GET_REPOSITORY_LANGUAGES_INFO_SUCCESS]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        languagesUrl: payload.response,\r\n      };\r\n    },\r\n    [actions.GET_REPOSITORY_LANGUAGES_INFO_FAIL]: (state, { payload }) => {\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        errors: payload.response,\r\n      };\r\n    },\r\n  },\r\n  defaultState\r\n);\r\n\r\nexport default repositoryPage;\r\n","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport repositoriesPage from '../pages/RepositoriesPage/reducers';\r\nimport repositoryPage from '../pages/RepositoryPage/reducers';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whiteList: ['repositoriesPage, repositoryPage'],\r\n    transforms: []\r\n};\r\n\r\nconst rootReducer = combineReducers({ repositoriesPage, repositoryPage });\r\n\r\nexport default persistReducer(persistConfig, rootReducer);","export const POSTFIXES = {\r\n  SUCCESS_POSTFIX: \"_SUCCESS\",\r\n  FAIL_POSTFIX: \"_FAIL\",\r\n  REQUEST_POSTFIX: \"_REQUEST\",\r\n};\r\n\r\nexport const REQUEST_PENDING_DELAY = 200;\r\n","import axios from \"axios\";\r\n\r\nexport const baseURL = \"https://api.github.com\";\r\n// export const Accept = 'application/vnd.github.v3+json';\r\n\r\nconst config = {\r\n  baseURL,\r\n  // Accept,\r\n};\r\n\r\nconst api = axios.create(config);\r\n\r\nexport default api;\r\n","export const PAGE = {\r\n  ITEMS_PER_PAGE: 10,\r\n  DEFAULT_PAGE_ID: 1,\r\n  DEBOUNCE_DELAY: 1000,\r\n};\r\n","import api from \"../../../config/apiConfig\";\r\n\r\nimport { PAGE } from \"../../../constants/pageConstants\";\r\n\r\nconst { ITEMS_PER_PAGE } = PAGE;\r\n\r\nexport const getAllRepositories = () => api.get(\"/repositories\");\r\n\r\nexport const searchRepositoriesByName = ({ searchInputValue, currentPageId }) =>\r\n  api.get(\r\n    `/search/repositories?q=${searchInputValue}&page=${currentPageId}&per_page=${ITEMS_PER_PAGE}`\r\n  );\r\n","import api from \"../../../config/apiConfig\";\r\n\r\nexport const getRepositoryById = (repositoryId) =>\r\n  api.get(`/repositories/${repositoryId}`);\r\n\r\nexport const getRepositoryAdditionalInfo = ({ userName, repositoryName }) =>\r\n  api.get(`/repos/${userName}/${repositoryName}`);\r\n\r\nexport const getRepositoryLanguagesInfo = ({ userName, repositoryName }) =>\r\n  api.get(`/repos/${userName}/${repositoryName}/languages`);\r\n","import * as repositoriesPageActions from \"../pages/RepositoriesPage/actions\";\r\nimport * as repositoriesPageApi from \"../pages/RepositoriesPage/api\";\r\n\r\nimport * as repositoryPageActions from \"../pages/RepositoryPage/actions\";\r\nimport * as repositoryPageApi from \"../pages/RepositoryPage/api\";\r\n\r\nconst apiCallsMapping = (action) => {\r\n  const mapping = {\r\n    [repositoriesPageActions.GET_GITHUB_REPOSITORIES_REQUEST]:\r\n      repositoriesPageApi.getAllRepositories,\r\n\r\n    [repositoriesPageActions.GET_SEARCHED_REPOSITORIES_REQUEST]:\r\n      repositoriesPageApi.searchRepositoriesByName,\r\n\r\n    [repositoryPageActions.GET_REPOSITORY_INFO_REQUEST]:\r\n      repositoryPageApi.getRepositoryById,\r\n\r\n    [repositoryPageActions.GET_REPOSITORY_ADDITIONAL_INFO_REQUEST]:\r\n      repositoryPageApi.getRepositoryAdditionalInfo,\r\n\r\n    [repositoryPageActions.GET_REPOSITORY_LANGUAGES_INFO_REQUEST]:\r\n      repositoryPageApi.getRepositoryLanguagesInfo,\r\n  };\r\n\r\n  if (!mapping.hasOwnProperty(action.type)) {\r\n    throw \"Not mapped action\";\r\n  }\r\n\r\n  return mapping[action.type];\r\n};\r\n\r\nexport default apiCallsMapping;\r\n","import { POSTFIXES } from \"../../constants/actionPostfixes\";\r\n\r\nconst { REQUEST_POSTFIX } = POSTFIXES;\r\n\r\nconst createActionWithPostfix = (action, payload, postfix) => {\r\n  return {\r\n    type:\r\n      action.type.slice(0, action.type.length - REQUEST_POSTFIX.length) +\r\n      postfix,\r\n    payload: {\r\n      response: payload.response,\r\n      actionPayload: payload.actionPayload,\r\n    },\r\n  };\r\n};\r\n\r\nexport default createActionWithPostfix;\r\n","// import { call, delay, put, takeEvery } from \"redux-saga/effects\";\r\n// import createActionWithPostfix from \"./actionPostfixCreator\";\r\n// import { isEmpty } from 'lodash';\r\n// import { POSTFIXES, REQUEST_PENDING_DELAY } from '../../constants/actionPostfixes';\r\n// import apiCallsMapping from '../../api/apiCallsMapping';\r\n\r\n// const { REQUEST_POSTFIX, SUCCESS_POSTFIX, FAIL_POSTFIX } = POSTFIXES;\r\n\r\n// function* sendRequest(action) {\r\n//     try {\r\n//         const callRequest = apiCallsMapping(action);\r\n//         const response = yield call(callRequest, action.payload);\r\n\r\n//         yield put(\r\n//             createActionWithPostfix(\r\n//                 action,\r\n//                 { response: !isEmpty(response) ? response.data : {}, actionPayload: action.payload },\r\n//                 SUCCESS_POSTFIX\r\n//             )\r\n//         );\r\n//     } catch (error) {\r\n//         yield put(\r\n//             createActionWithPostfix(\r\n//                 action,\r\n//                 { response: !isEmpty(error).response ? error.response.data.message : '' },\r\n//                 FAIL_POSTFIX\r\n//             )\r\n//         );\r\n//     }\r\n// }\r\n\r\n// function* requestEnded() {\r\n//     yield delay(REQUEST_PENDING_DELAY);  // del\r\n// }\r\n\r\n// const isApiCallAction = (action) => action.type.endsWith(REQUEST_POSTFIX);\r\n\r\n// const isApiCallEndedAction = (action) => action.type.endsWith(SUCCESS_POSTFIX) || action.type.endsWith(FAIL_POSTFIX);\r\n\r\n// function* apiCallsSaga () {\r\n//     yield takeEvery(isApiCallAction, sendRequest);\r\n//     yield takeEvery(isApiCallEndedAction, requestEnded);\r\n// }\r\n\r\n// export default apiCallsSaga;\r\n\r\nimport { call, put, takeEvery, delay } from \"redux-saga/effects\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nimport {\r\n  POSTFIXES,\r\n  REQUEST_PENDING_DELAY,\r\n} from \"../../constants/actionPostfixes\";\r\nimport apiCallsMapping from \"../../api/apiCallsMapping\";\r\nimport createActionWithPostfix from \"./actionPostfixCreator\";\r\n\r\nconst { REQUEST_POSTFIX, SUCCESS_POSTFIX, FAIL_POSTFIX } = POSTFIXES;\r\n\r\nfunction* sendRequest(action) {\r\n  try {\r\n    const callMethod = apiCallsMapping(action);\r\n    const response = yield call(callMethod, action.payload);\r\n    yield put(\r\n      createActionWithPostfix(\r\n        action,\r\n        {\r\n          response: !isEmpty(response) ? response.data : {},\r\n          actionPayload: action.payload,\r\n        },\r\n        SUCCESS_POSTFIX\r\n      )\r\n    );\r\n  } catch (error) {\r\n    yield put(\r\n      createActionWithPostfix(\r\n        action,\r\n        {\r\n          response: !isEmpty(error.response) ? error.response.data.message : \"\",\r\n        },\r\n        FAIL_POSTFIX\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nfunction* requestEnded() {\r\n  yield delay(REQUEST_PENDING_DELAY);\r\n}\r\n\r\nconst isApiCallAction = (action) => action.type.endsWith(REQUEST_POSTFIX);\r\n\r\nconst isApiCallEndedAction = (action) =>\r\n  action.type.endsWith(SUCCESS_POSTFIX) || action.type.endsWith(FAIL_POSTFIX);\r\n\r\nfunction* apiCallsSaga() {\r\n  yield takeEvery(isApiCallAction, sendRequest);\r\n  yield takeEvery(isApiCallEndedAction, requestEnded);\r\n}\r\n\r\nexport default apiCallsSaga;\r\n","import \"regenerator-runtime/runtime\";\r\nimport { all } from \"redux-saga/effects\";\r\nimport apiCallsSaga from '../helpers/request/watchRequest';\r\n// import getUsersSaga from '../pages/SagaPage/sagas/githubUsersSaga';\r\n\r\n// function* rootSaga() {\r\n//   yield all([getUsersSaga()]);\r\n// }\r\n\r\n// export default rootSaga;\r\n\r\nfunction* rootSaga() {\r\n  yield all([apiCallsSaga()]);\r\n}\r\n\r\nexport default rootSaga;","import createSagaMiddleware from \"redux-saga\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport function configureStore() {\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware(sagaMiddleware))\r\n  );\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n  return store;\r\n}","export const ROUTES = {\r\n  HOME: \"/\",\r\n  REPOSITORIES: \"/repositories\",\r\n  REPOSITORY: \"/repositories/:id\",\r\n};\r\n","const styles = () => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"collumn\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  boxContainer: {\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default styles;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { ROUTES } from \"../../../routes/routeNames\";\r\n\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  AppBar,\r\n  Toolbar,\r\n  withStyles,\r\n  Container,\r\n} from \"@material-ui/core/\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    paddingTop: 10,\r\n    fontSize: 20,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n  body: {\r\n    minHeight: \"100vh\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n});\r\nconst HomePage = ({}) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            GITHUB DSHBOARD\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Box className={classes.body}>\r\n        <Typography className={classes.root} variant=\"body1\" component=\"p\">\r\n          Создать приложение с использованием CRA, Redux, redux-saga, hooks.\r\n        </Typography>\r\n        <Typography className={classes.root} variant=\"body1\" component=\"p\">\r\n          Задание: Используя API реализовать Github Dashboard\r\n        </Typography>\r\n        <Typography className={classes.root} variant=\"body1\" component=\"p\">\r\n          Необходимо используя API Github создать Front-end приложение, которое\r\n          состоит из двух страниц:\r\n        </Typography>\r\n        <Typography className={classes.root} variant=\"body1\" component=\"p\">\r\n          Главная страница – список репозиториев с возможностью поиска и\r\n          страницами\r\n        </Typography>\r\n        <Typography className={classes.root} variant=\"body1\" component=\"p\">\r\n          Карточка репозитория – страница с более детальной информацией по\r\n          репозиторию\r\n        </Typography>\r\n        <Typography className={classes.root} variant=\"body1\" component=\"p\">\r\n          В проекте использовать библиотеку компонентов Material UI\r\n        </Typography>\r\n\r\n        <Box className={classes.root}>\r\n          <Button\r\n            onClick={() => history.push(ROUTES.REPOSITORIES)}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            Get Repositories\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box>\r\n        <AppBar position=\"static\">\r\n          <Toolbar></Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(HomePage);\r\n","import {\r\n  CardActions,\r\n  CardContent,\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  withStyles,\r\n  Link,\r\n} from \"@material-ui/core/\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nconst RepositoryCard = ({\r\n  name,\r\n  ownerUrl,\r\n  userLogin,\r\n  classes,\r\n  handleGoToDetails,\r\n}) => {\r\n  return (\r\n    <Box>\r\n      <CardActions style={{ backgroundColor: \"gainsboro\" }}>\r\n        <CardContent>\r\n          <Box className={classes.avatarNameWrap}>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n              {name}\r\n            </Typography>\r\n          </Box>\r\n          <Typography>Owner: {userLogin}</Typography>\r\n          <Typography>\r\n            Link To GitHub:\r\n            <Link color=\"secondary\" target=\"_blank\" href={ownerUrl}>\r\n              {ownerUrl}\r\n            </Link>\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActions>\r\n      <CardActions style={{ backgroundColor: \"gainsboro\" }}>\r\n        <Button\r\n          onClick={handleGoToDetails}\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n        >\r\n          Learn More\r\n        </Button>\r\n      </CardActions>\r\n    </Box>\r\n  );\r\n};\r\n\r\nRepositoryCard.propTypes = {\r\n  classes: PropTypes.oneOfType([PropTypes.object]).isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  ownerUrl: PropTypes.string.isRequired,\r\n  handleGoToDetails: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(RepositoryCard);\r\n","import PropTypes from \"prop-types\";\r\n\r\nimport {\r\n  Box,\r\n  Typography,\r\n  withStyles,\r\n  Button,\r\n  Container,\r\n  AppBar,\r\n  Toolbar,\r\n  LinearProgress,\r\n  InputBase,\r\n} from \"@material-ui/core\";\r\n\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n\r\nimport { makeStyles, fade } from \"@material-ui/core/styles\";\r\n\r\nimport RepositoryCard from \"../components/RepositoryCard/RepositoryCard\";\r\n\r\nimport { PAGE } from \"../../../constants/pageConstants\";\r\n\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nconst { DEFAULT_PAGE_ID, ITEMS_PER_PAGE } = PAGE;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: \"auto\",\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\",\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"12ch\",\r\n      \"&:focus\": {\r\n        width: \"20ch\",\r\n      },\r\n    },\r\n  },\r\n  pagination: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\nconst RepositoriesOverview = ({\r\n  repositories,\r\n  isLoading,\r\n  errors,\r\n  handleGoToRepository,\r\n  handleSearchInputChange,\r\n  handlePageChange,\r\n  handleClearInput,\r\n  currentPageId,\r\n  searchInputValue,\r\n  getRepositoriesSubarray,\r\n  handleGoToHome,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container>\r\n      <AppBar position=\"relative\" className={classes.root}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\">\r\n            GITHUB DASHBOARD\r\n          </Typography>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={handleGoToHome}\r\n          >\r\n            Home\r\n          </Button>\r\n          <Box className={classes.search}>\r\n            <Box className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </Box>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              value={searchInputValue}\r\n              onChange={handleSearchInputChange}\r\n            />\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {isLoading ? (\r\n        <Box>\r\n          <LinearProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <Box>\r\n          {searchInputValue.trim() === \"\" ? (\r\n            getRepositoriesSubarray.map((repository) => {\r\n              return (\r\n                <Box paddingTop={2} key={repository.id}>\r\n                  <RepositoryCard\r\n                    name={repository.name}\r\n                    ownerUrl={repository.owner.html_url}\r\n                    userLogin={repository.owner.login}\r\n                    handleGoToDetails={() =>\r\n                      handleGoToRepository(repository.id)\r\n                    }\r\n                  />\r\n                </Box>\r\n              );\r\n            })\r\n          ) : repositories.length !== 0 ? (\r\n            repositories.map((repository) => {\r\n              return (\r\n                <Box paddingTop={2} key={repository.id}>\r\n                  <RepositoryCard\r\n                    name={repository.name}\r\n                    ownerUrl={repository.owner.html_url}\r\n                    userLogin={repository.owner.login}\r\n                    handleGoToDetails={() =>\r\n                      handleGoToRepository(repository.id)\r\n                    }\r\n                  />\r\n                </Box>\r\n              );\r\n            })\r\n          ) : (\r\n            <Box className={classes.notFoundWrapper}>\r\n              <Box className={classes.notFoundItem}>\r\n                <Box>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    component=\"h5\"\r\n                    className={classes.typographyStyle}\r\n                  >\r\n                    Oops! <br />\r\n                  </Typography>\r\n                  <Typography variant=\"h5\" className={classes.typographyStyle}>\r\n                    This repo can’t be found <br />\r\n                    Please, try again\r\n                  </Typography>\r\n                </Box>\r\n                <Button\r\n                  className={classes.clearButton}\r\n                  variant=\"text\"\r\n                  size=\"large\"\r\n                  color=\"primary\"\r\n                  onClick={handleClearInput}\r\n                >\r\n                  TRY AGAIN\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n          )}\r\n          {repositories.length === 0 ? (\r\n            \"\"\r\n          ) : (\r\n            <Box paddingTop={2}>\r\n              <AppBar position=\"static\">\r\n                <Toolbar className={classes.pagination}>\r\n                  <Pagination\r\n                    color=\"secondary\"\r\n                    count={\r\n                      searchInputValue.trim() === \"\"\r\n                        ? ITEMS_PER_PAGE\r\n                        : repositories.length < ITEMS_PER_PAGE\r\n                        ? currentPageId\r\n                        : currentPageId === ITEMS_PER_PAGE\r\n                        ? currentPageId\r\n                        : currentPageId + 1\r\n                    }\r\n                    defaultPage={DEFAULT_PAGE_ID}\r\n                    onChange={handlePageChange}\r\n                    page={\r\n                      currentPageId !== \"\" ? currentPageId : DEFAULT_PAGE_ID\r\n                    }\r\n                  />\r\n                </Toolbar>\r\n              </AppBar>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nRepositoriesOverview.propTypes = {};\r\n\r\nexport default withStyles(styles)(RepositoriesOverview);\r\n","import { useEffect, useCallback, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { debounce } from \"lodash\";\r\n\r\nimport RepositoriesOverview from \"../components/RepositoriesOverview\";\r\nimport {\r\n  GET_GITHUB_REPOSITORIES_REQUEST,\r\n  GET_SEARCHED_REPOSITORIES_REQUEST,\r\n  UPDATE_CURRENT_PAGE_ID,\r\n  UPDATE_INPUT_VALUE,\r\n} from \"../actions\";\r\nimport { ROUTES } from \"../../../routes/routeNames\";\r\nimport { PAGE } from \"../../../constants/pageConstants\";\r\n\r\nconst { ITEMS_PER_PAGE, DEFAULT_PAGE_ID, DEBOUNCE_DELAY } = PAGE;\r\n\r\nconst RepositoriesContainer = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n\r\n  const {\r\n    repositories,\r\n    isLoading,\r\n    searchInputValue,\r\n    currentPageId,\r\n  } = useSelector((state) => state.repositoriesPage);\r\n\r\n  const handleGoToRepository = useCallback(\r\n    (id) => {\r\n      history.push(`${ROUTES.REPOSITORIES}/${id}`);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  const handleGoToHome = useCallback(\r\n    (id) => {\r\n      history.push(`${ROUTES.HOME}`);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const isEmptyInput = searchInputValue.trim() === \"\";\r\n\r\n    const params = {\r\n      searchInputValue,\r\n      currentPageId,\r\n    };\r\n\r\n    isEmptyInput\r\n      ? dispatch(GET_GITHUB_REPOSITORIES_REQUEST())\r\n      : dispatch(GET_SEARCHED_REPOSITORIES_REQUEST(params));\r\n  }, []);\r\n\r\n  const delayedQuery = useCallback(\r\n    debounce(\r\n      (params, isEmptyInput) =>\r\n        isEmptyInput\r\n          ? dispatch(GET_GITHUB_REPOSITORIES_REQUEST())\r\n          : dispatch(GET_SEARCHED_REPOSITORIES_REQUEST(params)),\r\n      DEBOUNCE_DELAY\r\n    ),\r\n    [dispatch]\r\n  );\r\n\r\n  const handleSearchInputChange = useCallback(\r\n    (event) => {\r\n      dispatch(UPDATE_INPUT_VALUE(event.target.value));\r\n\r\n      if (currentPageId !== DEFAULT_PAGE_ID)\r\n        dispatch(UPDATE_CURRENT_PAGE_ID(DEFAULT_PAGE_ID));\r\n\r\n      const params = {\r\n        searchInputValue: event.target.value,\r\n        currentPageId,\r\n      };\r\n\r\n      const isEmptyInput = event.target.value.trim() === \"\";\r\n\r\n      delayedQuery(params, isEmptyInput);\r\n    },\r\n    [dispatch, currentPageId, delayedQuery]\r\n  );\r\n\r\n  const handleClearInput = useCallback(\r\n    (event) => {\r\n      dispatch(UPDATE_INPUT_VALUE(\"\"));\r\n\r\n      if (currentPageId !== DEFAULT_PAGE_ID)\r\n        dispatch(UPDATE_CURRENT_PAGE_ID(DEFAULT_PAGE_ID));\r\n\r\n      const params = {\r\n        searchInputValue: event.target.value,\r\n        currentPageId,\r\n      };\r\n\r\n      const isEmptyInput = true;\r\n\r\n      delayedQuery(params, isEmptyInput);\r\n    },\r\n    [dispatch, currentPageId, delayedQuery]\r\n  );\r\n\r\n  const getRepositoriesSubarray = useMemo(() => {\r\n    if (currentPageId === \"\") dispatch(UPDATE_CURRENT_PAGE_ID(DEFAULT_PAGE_ID));\r\n\r\n    const firstItemIndex = (currentPageId - 1) * ITEMS_PER_PAGE;\r\n\r\n    return repositories.slice(firstItemIndex, firstItemIndex + ITEMS_PER_PAGE);\r\n  }, [currentPageId, repositories, dispatch]);\r\n\r\n  const handlePageChange = useCallback(\r\n    (event, pageId) => {\r\n      dispatch(UPDATE_CURRENT_PAGE_ID(pageId));\r\n\r\n      const params = {\r\n        searchInputValue,\r\n        currentPageId: pageId,\r\n      };\r\n\r\n      const isEmptyInput = searchInputValue.trim() === \"\";\r\n\r\n      if (!isEmptyInput) dispatch(GET_SEARCHED_REPOSITORIES_REQUEST(params));\r\n    },\r\n    [dispatch, searchInputValue]\r\n  );\r\n\r\n  return (\r\n    <RepositoriesOverview\r\n      handleSearchInputChange={handleSearchInputChange}\r\n      handleGoToRepository={handleGoToRepository}\r\n      repositories={repositories}\r\n      isLoading={isLoading}\r\n      handlePageChange={handlePageChange}\r\n      currentPageId={currentPageId}\r\n      searchInputValue={searchInputValue}\r\n      getRepositoriesSubarray={getRepositoriesSubarray}\r\n      handleClearInput={handleClearInput}\r\n      handleGoToHome={handleGoToHome}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RepositoriesContainer;\r\n","import PropTypes from \"prop-types\";\r\nimport {\r\n  withStyles,\r\n  CardContent,\r\n  Typography,\r\n  CardActions,\r\n  Button,\r\n  Avatar,\r\n  Link,\r\n  Box,\r\n  Badge,\r\n  Container,\r\n  AppBar,\r\n  Toolbar,\r\n  LinearProgress,\r\n  CardHeader,\r\n} from \"@material-ui/core\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  large: {\r\n    width: theme.spacing(10),\r\n    height: theme.spacing(10),\r\n  },\r\n}));\r\nconst RepositoryPage = ({\r\n  repositoryName,\r\n  starsUrl,\r\n  commitsUrl,\r\n  avatar,\r\n  userLogin,\r\n  linkToGithub,\r\n  languagesUrl,\r\n  decription,\r\n  isLoading,\r\n  handleGoToRepositories,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Container>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">GITHUB DASHBOARD</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {isLoading ? (\r\n        <Box>\r\n          <LinearProgress color=\"secondary\" />\r\n        </Box>\r\n      ) : (\r\n        <Box>\r\n          <Box paddingTop={2}>\r\n            <CardActions style={{ backgroundColor: \"gainsboro\" }}>\r\n              <CardContent>\r\n                <Box>\r\n                  <Box>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                      {repositoryName}\r\n                      <Badge\r\n                        badgeContent={starsUrl}\r\n                        max={10000}\r\n                        color=\"secondary\"\r\n                      >\r\n                        <StarIcon fontSize=\"large\" />\r\n                      </Badge>\r\n                    </Typography>\r\n                  </Box>\r\n                  <CardHeader\r\n                    avatar={<Avatar src={avatar} className={classes.large} />}\r\n                    title={<Typography>User login: {userLogin}</Typography>}\r\n                    subheader={\r\n                      <Typography>\r\n                        Link to GitHub:{` `}\r\n                        <Link\r\n                          color=\"secondary\"\r\n                          target=\"_blank\"\r\n                          href={linkToGithub}\r\n                        >\r\n                          {linkToGithub}\r\n                        </Link>\r\n                      </Typography>\r\n                    }\r\n                  />\r\n                </Box>\r\n                <Box>\r\n                  <Typography color=\"textSecondary\">\r\n                    Created: {new Date(commitsUrl).toDateString()}\r\n                  </Typography>\r\n                </Box>\r\n                <Typography variant=\"body1\" component=\"p\">\r\n                  Description: {decription}\r\n                  <br />\r\n                  Languages:\r\n                  {Object.keys(languagesUrl).map((language, index) => {\r\n                    return (\r\n                      <Typography component=\"span\" key={index}>\r\n                        {\" \"}\r\n                        {language}{\" \"}\r\n                      </Typography>\r\n                    );\r\n                  })}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActions>\r\n          </Box>\r\n          <CardActions style={{ backgroundColor: \"gainsboro\" }}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={handleGoToRepositories}\r\n            >\r\n              GO BACK\r\n            </Button>\r\n          </CardActions>\r\n        </Box>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nRepositoryPage.propTypes = {\r\n  classes: PropTypes.oneOfType([PropTypes.object]).isRequired,\r\n  repositoryName: PropTypes.string.isRequired,\r\n  starsUrl: PropTypes.oneOfType([\r\n    PropTypes.string.isRequired,\r\n    PropTypes.number.isRequired,\r\n  ]),\r\n  commitsUrl: PropTypes.string.isRequired,\r\n  avatar: PropTypes.string.isRequired,\r\n  linkToGithub: PropTypes.string.isRequired,\r\n  userLogin: PropTypes.string.isRequired,\r\n  languagesUrl: PropTypes.oneOfType([\r\n    PropTypes.object.isRequired,\r\n    PropTypes.string.isRequired,\r\n  ]),\r\n  decription: PropTypes.string.isRequired,\r\n  handleGoToRepositories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(RepositoryPage);\r\n","import { useEffect, useCallback } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport RepositoryPage from \"../components/RepositoryPage/RepositoryPage\";\r\nimport {\r\n  GET_REPOSITORY_INFO_REQUEST,\r\n  GET_REPOSITORY_ADDITIONAL_INFO_REQUEST,\r\n  GET_REPOSITORY_LANGUAGES_INFO_REQUEST,\r\n} from \"../actions\";\r\nimport { ROUTES } from \"../../../routes/routeNames\";\r\n\r\nconst RepositoryPageContainer = () => {\r\n  const { id } = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n\r\n  const {\r\n    repositoryName,\r\n    starsUrl,\r\n    commitsUrl,\r\n    avatar,\r\n    userLogin,\r\n    linkToGithub,\r\n    languagesUrl,\r\n    decription,\r\n    isLoading,\r\n    errors,\r\n  } = useSelector((state) => state.repositoryPage);\r\n\r\n  const handleGoToRepositories = useCallback(() => {\r\n    history.push(`${ROUTES.REPOSITORIES}`);\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    dispatch(GET_REPOSITORY_INFO_REQUEST(id));\r\n  }, [dispatch, id]);\r\n\r\n  useEffect(() => {\r\n    const params = {\r\n      repositoryName,\r\n      userName: userLogin,\r\n    };\r\n\r\n    if (repositoryName && userLogin) {\r\n      dispatch(GET_REPOSITORY_ADDITIONAL_INFO_REQUEST(params));\r\n      dispatch(GET_REPOSITORY_LANGUAGES_INFO_REQUEST(params));\r\n    }\r\n  }, [dispatch, repositoryName, userLogin]);\r\n\r\n  return (\r\n    <RepositoryPage\r\n      repositoryName={repositoryName}\r\n      starsUrl={starsUrl}\r\n      commitsUrl={commitsUrl}\r\n      avatar={avatar}\r\n      userLogin={userLogin}\r\n      linkToGithub={linkToGithub}\r\n      languagesUrl={languagesUrl}\r\n      decription={decription}\r\n      isLoading={isLoading}\r\n      errors={errors}\r\n      handleGoToRepositories={handleGoToRepositories}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RepositoryPageContainer;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport { ROUTES } from '../routes/routeNames';\r\nimport HomePage from '../pages/HomePage/components/HomePage';\r\nimport RepositoriesContainer from '../pages/RepositoriesPage/containers/RepositoriesContainer';\r\nimport RepositoryPageContainer from '../pages/RepositoryPage/containers/RepositoryPageContainer';\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path={ROUTES.HOME} component={HomePage} />\r\n            <Route exact path={ROUTES.REPOSITORIES} component={RepositoriesContainer} />\r\n            <Route exact path={ROUTES.REPOSITORY} component={RepositoryPageContainer} />\r\n            <Redirect from='*' to='/' />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default React.memo(Routes);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store/configureStore';\nimport Routes from './routes/Routes';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <Routes />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}